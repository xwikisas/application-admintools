<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="AdminTools.Code.AdminToolsJS" locale="">
  <web>AdminTools.Code</web>
  <name>AdminToolsJS</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>AdminTools.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>AdminToolsJS</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>AdminTools.Code.AdminToolsJS</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>133ab342-517a-44d7-a39c-b7e623954c4e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>define('admin-tools-cache-flush-editor', {
  prefix: 'adminTools.dashboard.healthcheck.flushCache.',
  keys: [
    'success',
    'error'
  ]
});

require(['jquery', 'xwiki-meta', 'xwiki-job-runner', 'xwiki-l10n!admin-tools-cache-flush-editor'],
    function($, xwikiMeta, JobRunner, l10n) {
  const getHealthCheckActionPageURL = function() {
    let documentReference = XWiki.Model.resolve('AdminTools.Code.HealthCheckResources', XWiki.EntityType.DOCUMENT);
    return new XWiki.Document(documentReference).getURL('get');
  };

  const runHealthCheckJob = function() {
    $('#healthCheckJobStart').prop('disabled', true);
    var data = [];
    data.push(
      {name: 'outputSyntax', value: 'plain'},
      {name: 'sheet', value: 'wiki:AdminTools.Code.HealthCheckResources'},
      {name: 'action', value: 'healthCheck'},
      {name: 'form_token', value: xwikiMeta.form_token}
    );
    return Promise.resolve(new JobRunner({
      createStatusRequest: function(jobId) {
        return {
          url: getHealthCheckActionPageURL(),
          data: {
            outputSyntax: 'plain',
            sheet: 'AdminTools.Code.HealthCheckResources',
            data: 'jobStatus',
            jobId: jobId.join('/')
          }
        };
      }
    }).run(getHealthCheckActionPageURL(), data)).catch((reason) =&gt; {
      return Promise.reject(reason);
    }).finally(() =&gt; {
      $('#healthCheckJobStart').prop('disabled', false);
    });
  };

  // Need to call job.js only after the job has started its execution and the result message has been changed for
  // the progress bar. Otherwise, job.js won't see .ui-progress and will not initialize and run a new JobRunner
  // with the requested configuration. To make sure the job .ui-progress is seen, we need to undefine and request the
  // resource again.
  const initialiseJobJS = function() {
    $.get(getHealthCheckActionPageURL(), function(data) {
      let jobJSURL = $(data).closest('div.admin-tools-health-check-progress').attr('data-job-js-url');
      require.config({
        paths: {
          'health-check-job': jobJSURL
        }
      });
      require(['health-check-job'], function(){});
    });
  };

  const reinitializeJobJS = function() {
    require.undef('health-check-job');
    require(['health-check-job'], function(){});
  }

  const reinitialiseHealthCheckResources = function() {
    $.get(getHealthCheckActionPageURL(), function(data) {
      let progressBar = $(data).find('div.ui-progress');
      $('#healthCheck').find('.job-result-message').replaceWith(progressBar);
      reinitializeJobJS()
    });
  };

  $(document).ready(function() {
    removeBrokenTOCHeaders();

    if ($('#healthCheck').length) {
      initialiseJobJS();
      let jobState = $('.health-check-job-state').attr('data-job-state');
      if (jobState == 'RUNNING') {
        runHealthCheckJob();
        $('#healthCheck .job-status').show();
      } else if (jobState == 'FINISHED') {
        $('#healthCheck .job-status').show();
      }
    }
  });

  $(document).on('click', '#healthCheckJobStart', function(event) {
    event.preventDefault();
    $('#healthCheck .log').empty();
    runHealthCheckJob();
    reinitialiseHealthCheckResources();
    $('#healthCheck .job-status').show();
  });

  $(document).on('click', '#downloadFilesModal .btn-primary', function(event) {
    event.preventDefault();
    const downloadForm = $('#downloadFilesModal form');

    // Simulate a click on a link to initialize the download.
    const link = document.createElement('a');
    link.href = downloadForm.attr('action') + '?' + downloadForm.serialize();
    link.click();
    $(event.currentTarget).closest('.modal').modal('toggle');
  });

  $(document).on('click', '#filesViewLastNLinesModal .btn-primary, #configurationViewLastNLinesModal .btn-primary',
    function(event) {
    event.preventDefault();
    const modal = $(event.currentTarget).closest('.modal');
    const downloadForm = modal.find('form');
    let noLines = modal.find("input[name='noLines']").val();

    // If the input is empty, the default value of 1000 will be requested.
    if (noLines == '') {
      noLines = '1000';
    }

    // Simulate a click on a link to request the last 'noLines' logs.
    const link = document.createElement('a');
    link.href = downloadForm.attr('action') + '?noLines=' + noLines;
    link.target='_blank';
    link.click();
  });

  $(document).on('change', '#downloadFilesModal input[name="files"][value="logs"]', function() {
    if ($(this).is(':checked')) {
      $('#downloadFilesModal .download-logs-date-fields').show();
    } else {
      $('#downloadFilesModal .download-logs-date-fields').hide();
    }
  });

  // Remove broken dashboard gadget titles, since in some cases these will be either empty, with the wrong title or
  // will have no ID set, which will make the link unusable. This method should be updated after upgrading to a
  // XWiki parent that includes fixes for XWIKI-20600: Gadget headings don't have an ID set, or XRENDERING-707: The toc
  // macro use the name of the page for empty heading entries. In older versions of the TOC macro, when the heading
  // is empty, it will automatically generate a text with the name of the page stored in
  // 'span.wikigeneratedlinkcontent'. We remove the text if it has children, or the entire heading otherwise, as
  // after the fix of XRENDERING-707, the 'span' is no longer used. We do not however remove those headings that have an
  // empty ID, but a valid text, since this can happen only when users add their own content to the dashboard and we
  // don't want to alter the macro behavior or fixes from recent versions.
  const removeBrokenTOCHeaders = function() {
    var headings = $('.wikitoc').find('a');
    for (let element of headings) {
      if ($(element).children("span.wikigeneratedlinkcontent").length || $.trim($(element).text()) === "") {
        let parent = element.parentElement.parentElement;
        if($(parent).children('ul').length){
          $(element).remove();
        } else {
          $(parent).remove();
        }
      }
    }
  }

  $(document).on('click', '#confirmCacheFlushModal .btn-primary', function(event) {
    event.preventDefault();
    const flushButton = $('#confirmCacheFlushModal .btn-primary');
    const target = flushButton.attr('data-action');
    $.post(target).done(function() {
      new XWiki.widgets.Notification(l10n.get('success'), 'done');
    }).fail(function(error) {
      console.log('Failed to flush instance cache. Cause: ' + error.statusText);
      new XWiki.widgets.Notification(l10n.get('error'), 'error');
    });
    $(event.currentTarget).closest('.modal').modal('toggle');
  });
});</code>
    </property>
    <property>
      <name>AdminToolsJavaScript</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
